import * as Yup from 'yup';

// Предположим, это массив объектов, полученных с backend
const fields = [
  {
    name: 'phone',
    type: 'string',
    min: 16,
    regex: null,
    isRequired: true,
    errorMessage: {
      min: 'Введите корректный номер телефона',
      required: 'Обязательное поле'
    }
  },
  {
    name: 'name',
    type: 'string',
    min: 2,
    regex: /^[А-Яа-яёЁ]/,
    isRequired: true,
    errorMessage: {
      min: 'Минимальное количество символов: 2',
      regex: 'Введите корректное имя',
      required: 'Обязательное поле'
    }
  }
];

// Функция для создания схемы Yup динамически
const createYupSchema = (schemaFields) => {
  let schema = {};
  
  schemaFields.forEach(field => {
    let validator = Yup.string();
    
    if (field.min) {
      validator = validator.min(field.min, field.errorMessage.min);
    }

    if (field.regex) {
      validator = validator.matches(field.regex, field.errorMessage.regex);
    }

    if (field.isRequired) {
      validator = validator.required(field.errorMessage.required);
    }
    
    schema[field.name] = validator;
  });

  return Yup.object().shape(schema);
};

// Создаем схему Yup
const validationSchema = createYupSchema(fields);

// Теперь `validationSchema` готова к использованию с Formik для валидации полей
